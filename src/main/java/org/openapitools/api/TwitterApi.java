/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CreateTwitterAccessTokenRequest;
import org.openapitools.model.GetTwitterAccountResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-12-01T03:05:48.192486Z[Etc/UTC]")
@Validated
@Api(value = "twitter", description = "the twitter API")
public interface TwitterApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /twitter/auth : アクセストークンの登録
     * Firebaseから取得した、アクセストークンを登録する
     *
     * @param createTwitterAccessTokenRequest  (required)
     * @return Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "アクセストークンの登録", nickname = "createTwitterAccessToken", notes = "Firebaseから取得した、アクセストークンを登録する", authorizations = {
        
        @Authorization(value = "Authorization")
         }, tags={ "twitter", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/twitter/auth",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> createTwitterAccessToken(@ApiParam(value = "", required = true) @Valid @RequestBody CreateTwitterAccessTokenRequest createTwitterAccessTokenRequest) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /twitter/auth : twitterアクセストークンを削除
     * アクセストークンを削除
     *
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "twitterアクセストークンを削除", nickname = "deleteTwitterAccessToken", notes = "アクセストークンを削除", authorizations = {
        
        @Authorization(value = "Authorization")
         }, tags={ "twitter", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/twitter/auth"
    )
    default ResponseEntity<Void> deleteTwitterAccessToken() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /twitter/account : ユーザー情報のTwitter情報を取得
     * ユーザー情報のTwitter情報を取得
     *
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "ユーザー情報のTwitter情報を取得", nickname = "getTwitterAccount", notes = "ユーザー情報のTwitter情報を取得", response = GetTwitterAccountResponse.class, authorizations = {
        
        @Authorization(value = "Authorization")
         }, tags={ "twitter", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = GetTwitterAccountResponse.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/twitter/account",
        produces = { "application/json" }
    )
    default ResponseEntity<GetTwitterAccountResponse> getTwitterAccount() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"screenName\" : \"screenName\", \"profileImageURL\" : \"profileImageURL\", \"accountUrl\" : \"accountUrl\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
