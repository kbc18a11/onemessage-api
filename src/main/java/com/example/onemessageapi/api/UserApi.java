/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)
 * (5.3.0-SNAPSHOT). https://openapi-generator.tech Do not edit the class manually.
 */
package com.example.onemessageapi.api;

import com.example.onemessageapi.model.response.GetTwitterAccountResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen",
        date = "2021-11-18T01:14:22.557617Z[Etc/UTC]")
@Validated
@Api(value = "user", description = "the user API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /user/{userId}/twitter : ユーザー情報のTwitter情報を取得 ユーザー情報のTwitter情報を取得
     *
     * @param userId ユーザーID (required)
     * @return OK (status code 200) or Bad Request (status code 400) or Unauthorized (status code
     *         401) or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "ユーザー情報のTwitter情報を取得", nickname = "getTwitterAccount",
            notes = "ユーザー情報のTwitter情報を取得", response = GetTwitterAccountResponse.class,
            authorizations = {

                    @Authorization(value = "Authorization")
            }, tags = {"twitter",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = GetTwitterAccountResponse.class),
            @ApiResponse(code = 400, message = "Bad Request"),
            @ApiResponse(code = 401, message = "Unauthorized"),
            @ApiResponse(code = 500, message = "Internal Server Error")})
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/user/{userId}/twitter",
            produces = {"application/json"})
    default ResponseEntity<GetTwitterAccountResponse> getTwitterAccount(
            @ApiParam(value = "ユーザーID", required = true) @PathVariable("userId") String userId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString =
                            "{ \"screenName\" : \"screenName\", \"profileImageURL\" : \"profileImageURL\", \"accountUrl\" : \"accountUrl\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
