/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)
 * (5.3.0-SNAPSHOT). https://openapi-generator.tech Do not edit the class manually.
 */
package com.example.onemessageapi.api;

import com.example.onemessageapi.model.request.CreateTwitterAccessTokenRequest;
import com.example.onemessageapi.model.response.GetTwitterAuthUrlResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen",
        date = "2021-11-08T04:28:10.768641Z[Etc/UTC]")
@Validated
@Api(value = "twitter", description = "the twitter API")
public interface TwitterApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /twitter/auth : アクセストークンの登録 暗証番号から、OAuth認可を行い、取得したアクセストークンを登録する
     *
     * @param createTwitterAccessTokenRequest (required)
     * @return OK (status code 201) or Bad Request (status code 400) or Unauthorized (status code
     *         401) or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "アクセストークンの登録", nickname = "createTwitterAccessToken",
            notes = "暗証番号から、OAuth認可を行い、取得したアクセストークンを登録する", authorizations = {

                    @Authorization(value = "Authorization")
            }, tags = {"twitter",})
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "OK"),
            @ApiResponse(code = 400, message = "Bad Request"),
            @ApiResponse(code = 401, message = "Unauthorized"),
            @ApiResponse(code = 500, message = "Internal Server Error")})
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/twitter/auth",
            consumes = {"application/json"})
    default ResponseEntity<Void> createTwitterAccessToken(@ApiParam(value = "",
            required = true) @Valid @RequestBody CreateTwitterAccessTokenRequest createTwitterAccessTokenRequest) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /twitter/auth : TwitterのOAuth認可用のURL取得 TwitterのOAuth認可用のURLを習得
     *
     * @return OK (status code 200) or Bad Request (status code 400) or Unauthorized (status code
     *         401) or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "TwitterのOAuth認可用のURL取得", nickname = "getTwitterAuthUrl",
            notes = "TwitterのOAuth認可用のURLを習得", response = GetTwitterAuthUrlResponse.class,
            authorizations = {

                    @Authorization(value = "Authorization")
            }, tags = {"twitter",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = GetTwitterAuthUrlResponse.class),
            @ApiResponse(code = 400, message = "Bad Request"),
            @ApiResponse(code = 401, message = "Unauthorized"),
            @ApiResponse(code = 500, message = "Internal Server Error")})
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/twitter/auth",
            produces = {"application/json"})
    default ResponseEntity<GetTwitterAuthUrlResponse> getTwitterAuthUrl() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"authUrl\" : \"authUrl\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
