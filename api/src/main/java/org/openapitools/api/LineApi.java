/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CreateLineAccountRequest;
import org.openapitools.model.CreateLineAccountResponse;
import org.openapitools.model.GetLineAccountFriendsResponse;
import org.openapitools.model.GetLineAccountResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-01-17T14:17:11.839899Z[Etc/UTC]")
@Validated
@Api(value = "line", description = "the line API")
public interface LineApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /line/account : LINEアカウントの登録
     * LINEチャンネルトークン・シークレットを登録する
     *
     * @param createLineAccountRequest  (required)
     * @return Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(
        tags = { "line" },
        value = "LINEアカウントの登録",
        nickname = "createLineAccount",
        notes = "LINEチャンネルトークン・シークレットを登録する",
        response = CreateLineAccountResponse.class,
        authorizations = {
            @Authorization(value = "Authorization")
         }
    )
    @ApiResponses({
        @ApiResponse(code = 201, message = "Created", response = CreateLineAccountResponse.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 500, message = "Internal Server Error")
    })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/line/account",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CreateLineAccountResponse> createLineAccount(
        @ApiParam(value = "", required = true) @Valid @RequestBody CreateLineAccountRequest createLineAccountRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"displayName\" : \"displayName\", \"pictureUrl\" : \"pictureUrl\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /line/account : LINEアカウントを削除
     * LINEアカウントを削除
     *
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(
        tags = { "line" },
        value = "LINEアカウントを削除",
        nickname = "deleteLineAccount",
        notes = "LINEアカウントを削除",
        authorizations = {
            @Authorization(value = "Authorization")
         }
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error")
    })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/line/account"
    )
    default ResponseEntity<Void> deleteLineAccount(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /line/account : LINEアカウント情報を取得
     * LINEアカウント情報を取得
     *
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(
        tags = { "line" },
        value = "LINEアカウント情報を取得",
        nickname = "getLineAccount",
        notes = "LINEアカウント情報を取得",
        response = GetLineAccountResponse.class,
        authorizations = {
            @Authorization(value = "Authorization")
         }
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "OK", response = GetLineAccountResponse.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error")
    })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/line/account",
        produces = { "application/json" }
    )
    default ResponseEntity<GetLineAccountResponse> getLineAccount(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"displayName\" : \"displayName\", \"pictureUrl\" : \"pictureUrl\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /line/account/friends : LINEアカウントの友達情報の取得
     * ユーザーのLINEアカウントの友達情報の取得
     *
     * @param limit フォロワーの取得数 指定されない場合は、最大量まで取得される  (optional)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(
        tags = { "line" },
        value = "LINEアカウントの友達情報の取得",
        nickname = "getLineAccountFriends",
        notes = "ユーザーのLINEアカウントの友達情報の取得",
        response = GetLineAccountFriendsResponse.class,
        authorizations = {
            @Authorization(value = "Authorization")
         }
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "OK", response = GetLineAccountFriendsResponse.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 500, message = "Internal Server Error")
    })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/line/account/friends",
        produces = { "application/json" }
    )
    default ResponseEntity<GetLineAccountFriendsResponse> getLineAccountFriends(
        @ApiParam(value = "フォロワーの取得数 指定されない場合は、最大量まで取得される ") @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 0, \"friends\" : [ { \"id\" : \"id\" }, { \"id\" : \"id\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
